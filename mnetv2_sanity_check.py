# Adrien CHEVRIER MIT-0 License: LICENSES/MIT-0.txt

"""
mnetv2_sanity_check.py

This script performs a sanity check on data generated by
`mnetv2_burst_labeling.py or `mnetv2_manual_labeling.py`
scripts.

This script looks for missing images referenced in the CSV file,
images not referenced inside the CSV file, and duplicate entries. 
In case of found duplicate entries, the script let you display
them in a window for inspection. 

Adapt this script based on your model training requirements.
"""

import os
import csv
from collections import Counter, defaultdict
import cv2

# Paths
CSV_PTH = "labels.csv"
IMG_DIR = "captures/"

# Get all image files in folder
image_files = [f for f in os.listdir(IMG_DIR) if f.lower().endswith(".jpg")]
image_set = set(image_files)
image_count = len(image_files)

# Read all image names from CSV
csv_filenames = []
with open(CSV_PTH, mode='r') as f:
    reader = csv.reader(f)
    for row in reader:
        if row:
            csv_filenames.append(row[0])
csv_set = set(csv_filenames)
csv_count = len(csv_filenames)

# Detect missing and orphaned files
missing_files = csv_set - image_set           # In CSV but not in folder
orphaned_files = image_set - csv_set          # In folder but not in CSV

# Detect duplicates
filename_counts = Counter(csv_filenames)
duplicates = {name: count for name, count in filename_counts.items() if count > 1}

# Group rows by filename to get coordinates
duplicate_entries = defaultdict(list)
with open(CSV_PTH, mode='r') as f:
    reader = csv.reader(f)
    for row in reader:
        if row:
            filename = row[0]
            coords = row[1:3]  # x, y
            duplicate_entries[filename].append(coords)

# Print summary
print(f"Image files in {IMG_DIR}: {image_count}")
print(f"Entries in {CSV_PTH}: {csv_count}")

if missing_files:
    print("\n[Warning] Missing files referenced in CSV but not found in folder:")
    for f in sorted(missing_files):
        print(" -", f)
else:
    print("\n[Info] No missing image files.")

if orphaned_files:
    print("\n[Warning] Orphaned image files not listed in CSV:")
    for f in sorted(orphaned_files):
        print(" -", f)
else:
    print("\n[Info] No orphaned image files.")

print("\n[Info] Duplicate entries with coordinates:")
found_duplicates = False

for filename, coords_list in duplicate_entries.items():
    
    if len(coords_list) > 1:
        # Display duplicated coordinates
        found_duplicates = True
        print(f" - {filename} appears {len(coords_list)} times:")
        for coords in coords_list:
            print(f"    â†³ x={coords[0]}, y={coords[1]}")

if not found_duplicates:
    print("[Info] No duplicate entries found in CSV.")

# Display duplicate images
print("\n[Info] Displaying duplicated images. Press any key to show next, `q` to quit.")

for filename, coords_list in duplicate_entries.items():
    
    if len(coords_list) > 1:
        
        # Find duplicate image path
        image_path = os.path.join(IMG_DIR, filename)
        
        if os.path.exists(image_path):
            img = cv2.imread(image_path)
            
            if img is None:
                print(f"[Error] Could not load image {filename}")
                continue
            
            # Display the duplicated image in a window
            cv2.imshow(f"[Info] Duplicate: {filename}", img)
            print(f"[Info] Showing {filename} with {len(coords_list)} duplicates. Press any key to continue or `q` to quit.")
            key = cv2.waitKey(0) & 0xFF
            cv2.destroyAllWindows()
            
            if key == ord('q'):
                print("[Info] Quitting display loop.")
                break
        else:
            print(f"[Error] Image file not found: {filename}")
